syntax = "proto3";

package mcp;

option go_package = "github.com/adimarco/bifrost/mcp";

import "google/protobuf/any.proto";

// The sender or recipient of messages and data in a conversation.
enum Role {
  ASSISTANT = 0;
  USER = 1;
}

// The severity of a log message. These map to syslog message severities, as specified in RFC-5424: https://datatracker.ietf.org/doc/html/rfc5424#section-6.2.1
enum Logginglevel {
  ALERT = 0;
  CRITICAL = 1;
  DEBUG = 2;
  EMERGENCY = 3;
  ERROR = 4;
  INFO = 5;
  NOTICE = 6;
  WARNING = 7;
}

// A notification from the server to the client, informing it that a resource has changed and may need to be read again. This should only be sent if the client previously sent a resources/subscribe request.
message Resourceupdatednotification {
  google.protobuf.Any Params = 1;
  string Method = 2;
}

// Audio provided to or from an LLM.
message Audiocontent {
  // The MIME type of the audio. Different providers may support different audio types.
  string Mimetype = 1;
  string Type = 2;
  // Optional annotations for the client.
  Annotations Annotations = 3;
  // The base64-encoded audio data.
  string Data = 4;
}

// This notification can be sent by either side to indicate that it is cancelling a previously-issued request. The request SHOULD still be in-flight, but due to communication latency, it is always possible that this notification MAY arrive after the request has already finished. This notification indicates that the result will be unused, so any associated processing SHOULD cease. A client MUST NOT attempt to cancel its `initialize` request.
message Cancellednotification {
  string Method = 1;
  google.protobuf.Any Params = 2;
}

// Sent from the client to request a list of resources the server has.
message Listresourcesrequest {
  string Method = 1;
  google.protobuf.Any Params = 2;
}

message Result {
  // This result property is reserved by the protocol to allow clients and servers to attach additional metadata to their responses.
  google.protobuf.Any Meta = 1;
}

// Sent from the client to request resources/updated notifications from the server whenever a particular resource changes.
message Subscriberequest {
  string Method = 1;
  google.protobuf.Any Params = 2;
}

// The contents of a resource, embedded into a prompt or tool call result. It is up to the client how best to render embedded resources for the benefit of the LLM and/or the user.
message Embeddedresource {
  string Type = 1;
  // Optional annotations for the client.
  Annotations Annotations = 2;
  google.protobuf.Any Resource = 3;
}

// This notification is sent from the client to the server after initialization has finished.
message Initializednotification {
  string Method = 1;
  google.protobuf.Any Params = 2;
}

// A successful (non-error) response to a request.
message Jsonrpcresponse {
  string Id = 1;
  string Jsonrpc = 2;
  Result Result = 3;
}

// An optional notification from the server to the client, informing it that the list of resources it can read from has changed. This may be issued by servers without any previous subscription from the client.
message Resourcelistchangednotification {
  string Method = 1;
  google.protobuf.Any Params = 2;
}

// A template description for resources available on the server.
message Resourcetemplate {
  // A human-readable name for the type of resource this template refers to. This can be used by clients to populate UI elements.
  string Name = 1;
  // A URI template (according to RFC 6570) that can be used to construct resource URIs.
  string Uritemplate = 2;
  // Optional annotations for the client.
  Annotations Annotations = 3;
  // A description of what this template is for. This can be used by clients to improve the LLM's understanding of available resources. It can be thought of like a "hint" to the model.
  string Description = 4;
  // The MIME type for all resources that match this template. This should only be included if all resources matching this template have the same type.
  string Mimetype = 5;
}

// An image provided to or from an LLM.
message Imagecontent {
  string Type = 1;
  // Optional annotations for the client.
  Annotations Annotations = 2;
  // The base64-encoded image data.
  string Data = 3;
  // The MIME type of the image. Different providers may support different image types.
  string Mimetype = 4;
}

// Sent from the client to request a list of resource templates the server has.
message Listresourcetemplatesrequest {
  string Method = 1;
  google.protobuf.Any Params = 2;
}

// Describes an argument that a prompt can accept.
message Promptargument {
  // A human-readable description of the argument.
  string Description = 1;
  // The name of the argument.
  string Name = 2;
  // Whether this argument must be provided.
  bool Required = 3;
}

// Definition for a tool the client can call.
message Tool {
  // A human-readable description of the tool. This can be used by clients to improve the LLM's understanding of available tools. It can be thought of like a "hint" to the model.
  string Description = 1;
  // A JSON Schema object defining the expected parameters for the tool.
  google.protobuf.Any Inputschema = 2;
  // The name of the tool.
  string Name = 3;
  // Optional additional tool information.
  Toolannotations Annotations = 4;
}

// The server's response to a tool call. Any errors that originate from the tool SHOULD be reported inside the result object, with `isError` set to true, _not_ as an MCP protocol-level error response. Otherwise, the LLM would not be able to see that an error occurred and self-correct. However, any errors in _finding_ the tool, an error indicating that the server does not support tool calls, or any other exceptional conditions, should be reported as an MCP error response.
message Calltoolresult {
  // This result property is reserved by the protocol to allow clients and servers to attach additional metadata to their responses.
  google.protobuf.Any Meta = 1;
  repeated google.protobuf.Any Content = 2;
  // Whether the tool call ended in an error. If not set, this is assumed to be false (the call was successful).
  bool Iserror = 3;
}

// Describes the name and version of an MCP implementation.
message Implementation {
  string Name = 1;
  string Version = 2;
}

// This request is sent from the client to the server when it first connects, asking it to begin initialization.
message Initializerequest {
  string Method = 1;
  google.protobuf.Any Params = 2;
}

// Sent from the client to request cancellation of resources/updated notifications from the server. This should follow a previous resources/subscribe request.
message Unsubscriberequest {
  string Method = 1;
  google.protobuf.Any Params = 2;
}

// The server's response to a prompts/get request from the client.
message Getpromptresult {
  // This result property is reserved by the protocol to allow clients and servers to attach additional metadata to their responses.
  google.protobuf.Any Meta = 1;
  // An optional description for the prompt.
  string Description = 2;
  repeated Promptmessage Messages = 3;
}

// Identifies a prompt.
message Promptreference {
  // The name of the prompt or prompt template
  string Name = 1;
  string Type = 2;
}

// A known resource that the server is capable of reading.
message Resource {
  // A human-readable name for this resource. This can be used by clients to populate UI elements.
  string Name = 1;
  // The size of the raw resource content, in bytes (i.e., before base64 encoding or any tokenization), if known. This can be used by Hosts to display file sizes and estimate context window usage.
  int64 Size = 2;
  // The URI of this resource.
  string Uri = 3;
  // Optional annotations for the client.
  Annotations Annotations = 4;
  // A description of what this resource represents. This can be used by clients to improve the LLM's understanding of available resources. It can be thought of like a "hint" to the model.
  string Description = 5;
  // The MIME type of this resource, if known.
  string Mimetype = 6;
}

// Represents a root directory or file that the server can operate on.
message Root {
  // An optional name for the root. This can be used to provide a human-readable identifier for the root, which may be useful for display purposes or for referencing the root in other parts of the application.
  string Name = 1;
  // The URI identifying the root. This *must* start with file:// for now. This restriction may be relaxed in future versions of the protocol to allow other URI schemes.
  string Uri = 2;
}

// A notification from the client to the server, informing it that the list of roots has changed. This notification should be sent whenever the client adds, removes, or modifies any root. The server should then request an updated list of roots using the ListRootsRequest.
message Rootslistchangednotification {
  string Method = 1;
  google.protobuf.Any Params = 2;
}

// Capabilities a client may support. Known capabilities are defined here, in this schema, but this is not a closed set: any client can define its own, additional capabilities.
message Clientcapabilities {
  // Experimental, non-standard capabilities that the client supports.
  google.protobuf.Any Experimental = 1;
  // Present if the client supports listing roots.
  google.protobuf.Any Roots = 2;
  // Present if the client supports sampling from an LLM.
  google.protobuf.Any Sampling = 3;
}

message Notification {
  google.protobuf.Any Params = 1;
  string Method = 2;
}

message Paginatedresult {
  // This result property is reserved by the protocol to allow clients and servers to attach additional metadata to their responses.
  google.protobuf.Any Meta = 1;
  // An opaque token representing the pagination position after the last returned result. If present, there may be more results available.
  string Nextcursor = 2;
}

// A request that expects a response.
message Jsonrpcrequest {
  string Id = 1;
  string Jsonrpc = 2;
  string Method = 3;
  google.protobuf.Any Params = 4;
}

// The server's response to a prompts/list request from the client.
message Listpromptsresult {
  // This result property is reserved by the protocol to allow clients and servers to attach additional metadata to their responses.
  google.protobuf.Any Meta = 1;
  // An opaque token representing the pagination position after the last returned result. If present, there may be more results available.
  string Nextcursor = 2;
  repeated Prompt Prompts = 3;
}

// The server's response to a resources/list request from the client.
message Listresourcesresult {
  // This result property is reserved by the protocol to allow clients and servers to attach additional metadata to their responses.
  google.protobuf.Any Meta = 1;
  // An opaque token representing the pagination position after the last returned result. If present, there may be more results available.
  string Nextcursor = 2;
  repeated Resource Resources = 3;
}

// Hints to use for model selection. Keys not declared here are currently left unspecified by the spec and are up to the client to interpret.
message Modelhint {
  // A hint for a model name. The client SHOULD treat this as a substring of a model name; for example: - `claude-3-5-sonnet` should match `claude-3-5-sonnet-20241022` - `sonnet` should match `claude-3-5-sonnet-20241022`, `claude-3-sonnet-20240229`, etc. - `claude` should match any Claude model The client MAY also map the string to a different provider's model name or a different model family, as long as it fills a similar niche; for example: - `gemini-1.5-flash` could match `claude-3-haiku-20240307`
  string Name = 1;
}

message Paginatedrequest {
  string Method = 1;
  google.protobuf.Any Params = 2;
}

// Sent from the server to request a list of root URIs from the client. Roots allow servers to ask for specific directories or files to operate on. A common example for roots is providing a set of repositories or directories a server should operate on. This request is typically used when the server needs to understand the file system structure or access specific locations that the client has permission to read from.
message Listrootsrequest {
  string Method = 1;
  google.protobuf.Any Params = 2;
}

// A prompt or prompt template that the server offers.
message Prompt {
  // A list of arguments to use for templating the prompt.
  repeated Promptargument Arguments = 1;
  // An optional description of what this prompt provides
  string Description = 2;
  // The name of the prompt or prompt template.
  string Name = 3;
}

// Describes a message returned as part of a prompt. This is similar to `SamplingMessage`, but also supports the embedding of resources from the MCP server.
message Promptmessage {
  google.protobuf.Any Content = 1;
  Role Role = 2;
}

// The client's response to a roots/list request from the server. This result contains an array of Root objects, each representing a root directory or file that the server can operate on.
message Listrootsresult {
  // This result property is reserved by the protocol to allow clients and servers to attach additional metadata to their responses.
  google.protobuf.Any Meta = 1;
  repeated Root Roots = 2;
}

message Textresourcecontents {
  // The text of the item. This must only be set if the item can actually be represented as text (not binary data).
  string Text = 1;
  // The URI of this resource.
  string Uri = 2;
  // The MIME type of this resource, if known.
  string Mimetype = 3;
}

// A response to a request that indicates an error occurred.
message Jsonrpcerror {
  google.protobuf.Any Error = 1;
  string Id = 2;
  string Jsonrpc = 3;
}

// Sent from the client to request a list of prompts and prompt templates the server has.
message Listpromptsrequest {
  string Method = 1;
  google.protobuf.Any Params = 2;
}

// Notification of a log message passed from server to client. If no logging/setLevel request has been sent from the client, the server MAY decide which messages to send automatically.
message Loggingmessagenotification {
  string Method = 1;
  google.protobuf.Any Params = 2;
}

// A ping, issued by either the server or the client, to check that the other party is still alive. The receiver must promptly respond, or else may be disconnected.
message Pingrequest {
  string Method = 1;
  google.protobuf.Any Params = 2;
}

// The contents of a specific resource or sub-resource.
message Resourcecontents {
  // The MIME type of this resource, if known.
  string Mimetype = 1;
  // The URI of this resource.
  string Uri = 2;
}

// Text provided to or from an LLM.
message Textcontent {
  // Optional annotations for the client.
  Annotations Annotations = 1;
  // The text content of the message.
  string Text = 2;
  string Type = 3;
}

// An optional notification from the server to the client, informing it that the list of tools it offers has changed. This may be issued by servers without any previous subscription from the client.
message Toollistchangednotification {
  google.protobuf.Any Params = 1;
  string Method = 2;
}

// Optional annotations for the client. The client can use annotations to inform how objects are used or displayed
message Annotations {
  // Describes who the intended customer of this object or data is. It can include multiple entries to indicate content useful for multiple audiences (e.g., `["user", "assistant"]`).
  repeated Role Audience = 1;
  // Describes how important this data is for operating the server. A value of 1 means "most important," and indicates that the data is effectively required, while 0 means "least important," and indicates that the data is entirely optional.
  double Priority = 2;
}

// A request from the server to sample an LLM via the client. The client has full discretion over which model to select. The client should also inform the user before beginning sampling, to allow them to inspect the request (human in the loop) and decide whether to approve it.
message Createmessagerequest {
  string Method = 1;
  google.protobuf.Any Params = 2;
}

// After receiving an initialize request from the client, the server sends this response.
message Initializeresult {
  Implementation Serverinfo = 1;
  // This result property is reserved by the protocol to allow clients and servers to attach additional metadata to their responses.
  google.protobuf.Any Meta = 2;
  Servercapabilities Capabilities = 3;
  // Instructions describing how to use the server and its features. This can be used by clients to improve the LLM's understanding of available tools, resources, etc. It can be thought of like a "hint" to the model. For example, this information MAY be added to the system prompt.
  string Instructions = 4;
  // The version of the Model Context Protocol that the server wants to use. This may not match the version that the client requested. If the client cannot support this version, it MUST disconnect.
  string Protocolversion = 5;
}

// The server's response to a resources/templates/list request from the client.
message Listresourcetemplatesresult {
  // This result property is reserved by the protocol to allow clients and servers to attach additional metadata to their responses.
  google.protobuf.Any Meta = 1;
  // An opaque token representing the pagination position after the last returned result. If present, there may be more results available.
  string Nextcursor = 2;
  repeated Resourcetemplate Resourcetemplates = 3;
}

// A reference to a resource or resource template definition.
message Resourcereference {
  string Type = 1;
  // The URI or URI template of the resource.
  string Uri = 2;
}

// Used by the client to invoke a tool provided by the server.
message Calltoolrequest {
  string Method = 1;
  google.protobuf.Any Params = 2;
}

// The server's response to a completion/complete request
message Completeresult {
  // This result property is reserved by the protocol to allow clients and servers to attach additional metadata to their responses.
  google.protobuf.Any Meta = 1;
  google.protobuf.Any Completion = 2;
}

// The client's response to a sampling/create_message request from the server. The client should inform the user before returning the sampled message, to allow them to inspect the response (human in the loop) and decide whether to allow the server to see it.
message Createmessageresult {
  // This result property is reserved by the protocol to allow clients and servers to attach additional metadata to their responses.
  google.protobuf.Any Meta = 1;
  google.protobuf.Any Content = 2;
  // The name of the model that generated the message.
  string Model = 3;
  Role Role = 4;
  // The reason why sampling stopped, if known.
  string Stopreason = 5;
}

// An out-of-band notification used to inform the receiver of a progress update for a long-running request.
message Progressnotification {
  string Method = 1;
  google.protobuf.Any Params = 2;
}

// Additional properties describing a Tool to clients. NOTE: all properties in ToolAnnotations are **hints**. They are not guaranteed to provide a faithful description of tool behavior (including descriptive properties like `title`). Clients should never make tool use decisions based on ToolAnnotations received from untrusted servers.
message Toolannotations {
  // If true, the tool may perform destructive updates to its environment. If false, the tool performs only additive updates. (This property is meaningful only when `readOnlyHint == false`) Default: true
  bool Destructivehint = 1;
  // If true, calling the tool repeatedly with the same arguments will have no additional effect on the its environment. (This property is meaningful only when `readOnlyHint == false`) Default: false
  bool Idempotenthint = 2;
  // If true, this tool may interact with an "open world" of external entities. If false, the tool's domain of interaction is closed. For example, the world of a web search tool is open, whereas that of a memory tool is not. Default: true
  bool Openworldhint = 3;
  // If true, the tool does not modify its environment. Default: false
  bool Readonlyhint = 4;
  // A human-readable title for the tool.
  string Title = 5;
}

message Blobresourcecontents {
  // A base64-encoded string representing the binary data of the item.
  string Blob = 1;
  // The MIME type of this resource, if known.
  string Mimetype = 2;
  // The URI of this resource.
  string Uri = 3;
}

// The server's preferences for model selection, requested of the client during sampling. Because LLMs can vary along multiple dimensions, choosing the "best" model is rarely straightforward. Different models excel in different areas some are faster but less capable, others are more capable but more expensive, and so on. This interface allows servers to express their priorities across multiple dimensions to help clients make an appropriate selection for their use case. These preferences are always advisory. The client MAY ignore them. It is also up to the client to decide how to interpret these preferences and how to balance them against other considerations.
message Modelpreferences {
  // How much to prioritize cost when selecting a model. A value of 0 means cost is not important, while a value of 1 means cost is the most important factor.
  double Costpriority = 1;
  // Optional hints to use for model selection. If multiple hints are specified, the client MUST evaluate them in order (such that the first match is taken). The client SHOULD prioritize these hints over the numeric priorities, but MAY still use the priorities to select from ambiguous matches.
  repeated Modelhint Hints = 2;
  // How much to prioritize intelligence and capabilities when selecting a model. A value of 0 means intelligence is not important, while a value of 1 means intelligence is the most important factor.
  double Intelligencepriority = 3;
  // How much to prioritize sampling speed (latency) when selecting a model. A value of 0 means speed is not important, while a value of 1 means speed is the most important factor.
  double Speedpriority = 4;
}

// The server's response to a resources/read request from the client.
message Readresourceresult {
  // This result property is reserved by the protocol to allow clients and servers to attach additional metadata to their responses.
  google.protobuf.Any Meta = 1;
  repeated google.protobuf.Any Contents = 2;
}

message Request {
  string Method = 1;
  google.protobuf.Any Params = 2;
}

// Describes a message issued to or received from an LLM API.
message Samplingmessage {
  google.protobuf.Any Content = 1;
  Role Role = 2;
}

// Capabilities that a server may support. Known capabilities are defined here, in this schema, but this is not a closed set: any server can define its own, additional capabilities.
message Servercapabilities {
  // Present if the server offers any resources to read.
  google.protobuf.Any Resources = 1;
  // Present if the server offers any tools to call.
  google.protobuf.Any Tools = 2;
  // Present if the server supports argument autocompletion suggestions.
  google.protobuf.Any Completions = 3;
  // Experimental, non-standard capabilities that the server supports.
  google.protobuf.Any Experimental = 4;
  // Present if the server supports sending log messages to the client.
  google.protobuf.Any Logging = 5;
  // Present if the server offers any prompt templates.
  google.protobuf.Any Prompts = 6;
}

// A request from the client to the server, to ask for completion options.
message Completerequest {
  string Method = 1;
  google.protobuf.Any Params = 2;
}

// Used by the client to get a prompt provided by the server.
message Getpromptrequest {
  string Method = 1;
  google.protobuf.Any Params = 2;
}

// A notification which does not expect a response.
message Jsonrpcnotification {
  google.protobuf.Any Params = 1;
  string Jsonrpc = 2;
  string Method = 3;
}

// Sent from the client to the server, to read a specific resource URI.
message Readresourcerequest {
  string Method = 1;
  google.protobuf.Any Params = 2;
}

// A request from the client to the server, to enable or adjust logging.
message Setlevelrequest {
  string Method = 1;
  google.protobuf.Any Params = 2;
}

// An optional notification from the server to the client, informing it that the list of prompts it offers has changed. This may be issued by servers without any previous subscription from the client.
message Promptlistchangednotification {
  string Method = 1;
  google.protobuf.Any Params = 2;
}

// Sent from the client to request a list of tools the server has.
message Listtoolsrequest {
  string Method = 1;
  google.protobuf.Any Params = 2;
}

// The server's response to a tools/list request from the client.
message Listtoolsresult {
  // This result property is reserved by the protocol to allow clients and servers to attach additional metadata to their responses.
  google.protobuf.Any Meta = 1;
  // An opaque token representing the pagination position after the last returned result. If present, there may be more results available.
  string Nextcursor = 2;
  repeated Tool Tools = 3;
}

